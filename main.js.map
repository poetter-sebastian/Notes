{"version":3,"sources":["./src/app/note-add/note-add.component.ts","./src/app/note-add/note-add.component.html","./src/environments/environment.ts","./src/app/messages/messages.component.html","./src/app/messages/messages.component.ts","./src/app/message.service.ts","./src/app/note-detail/note-detail.component.ts","./src/app/note-detail/note-detail.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/notes/notes.component.html","./src/app/notes/notes.component.ts","./src/app/app.module.ts","./src/app/note.service.ts","./src/app/note-header/note-header.component.ts","./src/app/note-header/note-header.component.html","./src/app/auth.service.ts","./src/app/local-storage.service.ts","./src/app/note.ts","./src/app/remote-managing.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, Inject, OnInit, ViewChild} from '@angular/core'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport {Note} from '../note'\nimport { DOCUMENT } from '@angular/common'\nimport {FormControl, FormGroup, NgForm, Validators} from '@angular/forms'\nimport {LocalStorageService} from '../local-storage.service'\nimport {RemoteManagingService} from '../remote-managing.service'\n\n@Component({\n  selector: 'app-note-add',\n  templateUrl: './note-add.component.html',\n  styleUrls: ['./note-add.component.sass']\n})\nexport class NoteAddComponent implements OnInit {\n  @ViewChild('closeButton') closeButton: any\n\n  constructor(\n    private managingService: RemoteManagingService\n  ) {}\n\n  faAdd = faPlus\n  model = new Note(0, '', '', 0, 0)\n  submitted = false\n\n  onSubmit(form: NgForm): void {\n    this.closeButton.nativeElement.click()\n    console.log(this.model)\n    this.managingService.addNote(this.model, form).then(r => r)\n    this.submitted = true\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"footer fixed-right\">\n  <button type=\"button\" class=\"btn btn-pink rounded-circle\" data-bs-toggle=\"modal\" data-bs-target=\"#newNoteModal\" title=\"new Note\">\n    <fa-icon [icon]=\"faAdd\" size=\"3x\"></fa-icon>\n  </button>\n</div>\n\n<div class=\"modal\" id=\"newNoteModal\" tabindex=\"-1\" aria-labelledby=\"noteLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-xl\">\n    <form (ngSubmit)=\"onSubmit(noteForm)\" #noteForm=\"ngForm\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <div class=\"mb-3\">\n            <h5 class=\"modal-title d-inline-flex mb-0\" id=\"noteLabel\">Create new note</h5>\n          </div>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <label for=\"title\" class=\"form-label\">Note title</label>\n            <input type=\"text\" class=\"form-control\" id=\"title\" required [(ngModel)]=\"model.title\" name=\"title\" placeholder=\"Note title ...\">\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"message\" class=\"form-label\">Note text</label>\n            <textarea class=\"form-control\" id=\"message\" rows=\"7\"  required [(ngModel)]=\"model.message\" name=\"message\" ></textarea>\n          </div>\n        </div>\n        <div class=\"modal-footer pt-0\">\n          <button type=\"submit\" class=\"btn btn-pink\" [disabled]=\"!noteForm.form.valid\">Save note</button>\n          <button type=\"button\" #closeButton class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<div class=\"container\" *ngIf=\"messageService.messages.length\">\n  <button class=\"btn btn-pink\" (click)=\"messageService.clear()\">Clear messages</button>\n  <div *ngFor='let message of messageService.messages' class=\"alert alert-info mt-2\" role=\"alert\">{{message}}</div>\n</div>\n","import { Component, OnInit } from '@angular/core'\nimport { MessageService } from '../message.service'\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.sass']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor(public messageService: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = []\n\n  add(message: string): void {\n    this.messages.push(message)\n  }\n\n  clear(): void {\n    this.messages = []\n  }\n}\n","import {Component, OnInit, Input, ViewChild, ElementRef} from '@angular/core'\nimport {Note} from '../note'\nimport {RemoteManagingService} from '../remote-managing.service'\n\n@Component({\n  selector: 'app-note-detail',\n  templateUrl: './note-detail.component.html',\n  styleUrls: ['./note-detail.component.sass']\n})\nexport class NoteDetailComponent implements OnInit {\n  @ViewChild('closeButton') closeButton: any\n  @ViewChild('title') title: ElementRef\n  @ViewChild('text') text: ElementRef\n  @Input() note?: Note\n\n  constructor(private managingService: RemoteManagingService, title: ElementRef, text: ElementRef) {\n    this.title = title\n    this.text = text\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(form: any): void {\n    this.closeButton.nativeElement.click()\n    if (this.note === undefined) {\n      return\n    }\n    const editedNote = new Note(\n      this.note.id, this.title.nativeElement.value,\n      this.text.nativeElement.value,\n      this.note.created,\n      this.note.last_edited)\n    this.managingService.setNode(editedNote).then(r => r)\n  }\n\n  deleteNote(): void {\n    if (this.note === undefined) {\n      return\n    }\n    this.managingService.deleteNote(this.note.id).then(r => r)\n  }\n}\n","<div class=\"modal\" id=\"noteModal\" tabindex=\"-1\" aria-labelledby=\"noteLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-xl\">\n    <form (ngSubmit)=\"onSubmit(noteForm)\" #noteForm=\"ngForm\">\n      <div *ngIf=\"note\" class=\"modal-content\">\n        <div class=\"modal-header\">\n          <div class=\"mb-3\">\n            <h5 class=\"modal-title d-inline-flex\" id=\"noteLabel\">Title:&nbsp;&nbsp;\n              <input type=\"text\" class=\"form-control\" id=\"noteTitle\" #title placeholder=\"Note title\" value=\"{{note.title | uppercase}}\">\n            </h5>\n          </div>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <label for=\"noteText\" class=\"form-label\">Note text</label>\n            <textarea class=\"form-control\" id=\"noteText\" #text rows=\"7\">{{note.message}}</textarea>\n          </div>\n        </div>\n        <div class=\"modal-footer pt-0\">\n          <div class=\"w-100 row fs-es\">\n            <span class=\"col-6 text-left\">created: {{note.created | date}}</span>\n            <span class=\"col-6 text-end\">last edited: {{note.last_edited | date}}</span>\n          </div>\n          <button type=\"button\" class=\"btn btn-danger force-left\" (click)=\"deleteNote()\">Delete note</button>\n          <button type=\"submit\" class=\"btn btn-pink\" [disabled]=\"!noteForm.form.valid\">Save note</button>\n          <button type=\"button\" class=\"btn btn-secondary\" #closeButton data-bs-dismiss=\"modal\">Close</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core'\nimport 'bootstrap/dist/js/bootstrap.bundle.min'\nimport {AuthService} from './auth.service'\nimport {RemoteManagingService} from './remote-managing.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(private auth: AuthService, private manager: RemoteManagingService) {\n  }\n\n  title = '(My™®©℠ Notes™®©℠)™®©℠'\n\n  ngOnInit(): void {\n    window.addEventListener('online',  this.onNetworkStatusChange.bind(this))\n    window.addEventListener('offline', this.onNetworkStatusChange.bind(this))\n    this.auth.getLoginState()\n  }\n\n  onNetworkStatusChange(): void {\n    // if app was offline and getting online and push the new notes to the server\n    if (this.auth.getOfflineState() && !navigator.onLine) {\n      this.manager.setNotes(this.manager.getOfflineNotes()).then()\n    }\n    this.auth.setOfflineState(!navigator.onLine)\n\n  }\n}\n","<app-note-header [title]=\"title\"></app-note-header>\n\n<div class=\"container\">\n  <app-notes></app-notes>\n</div>\n\n<app-messages></app-messages>\n<router-outlet></router-outlet>\n","<div class=\"row row-cols-auto\">\n  <div *ngFor=\"let note of notes\" (click)=\"onSelect(note)\" class=\"card col-lg-2 col-md-3 m-lg-2\" data-bs-toggle=\"modal\" data-bs-target=\"#noteModal\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">{{note.title}}\n      </h5>\n      <p class=\"card-text\">{{(note.message.length>60)? (note.message | slice:0:60)+'...':(note.message)}}</p>\n    </div>\n  </div>\n</div>\n\n<app-note-detail [note]=\"selectedNote\"></app-note-detail>\n\n<app-note-add></app-note-add>\n","import {Component, Input, OnInit} from '@angular/core'\nimport {NoteService} from '../note.service'\nimport {LocalStorageService} from '../local-storage.service'\nimport {Note} from '../note'\nimport {MessageService} from '../message.service'\nimport {AuthService} from '../auth.service'\nimport {RemoteManagingService} from '../remote-managing.service'\nimport {not} from 'rxjs/internal-compatibility'\n\n@Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.sass']\n})\n\nexport class NotesComponent implements OnInit {\n\n  constructor(\n    private managingService: RemoteManagingService,\n    private messageService: MessageService\n  ) {}\n\n  notes: Note[] = []\n  selectedNote?: Note\n\n  ngOnInit(): void {\n    this.getNotes()\n  }\n\n  onSelect(note: Note): void {\n    this.selectedNote = note\n    this.messageService.add(`NotesComponent: Selected note id=${note.id}`)\n  }\n\n  updateNote(note: Note): void {\n    for (const existingNotes of this.notes) {\n      if (existingNotes.id === note.id) {\n        existingNotes.title = note.title\n        existingNotes.message = note.message\n        existingNotes.last_edited = note.last_edited\n        return\n      }\n    }\n    this.notes.push(note)\n  }\n\n  getNotes(): void {\n    console.log('note.component: load notes')\n    // TODO subscribe to managing service\n    this.managingService.callback = this.updateNote.bind(this)\n    this.managingService.getNotes().then(notes => this.notes = notes)\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppRoutingModule } from './app-routing.module'\nimport { AppComponent } from './app.component'\nimport { ServiceWorkerModule } from '@angular/service-worker'\nimport { environment } from '../environments/environment'\nimport { NotesComponent } from './notes/notes.component'\nimport { NoteDetailComponent } from './note-detail/note-detail.component'\nimport { NoteAddComponent } from './note-add/note-add.component'\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { NoteHeaderComponent } from './note-header/note-header.component';\nimport { MessagesComponent } from './messages/messages.component'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NotesComponent,\n    NoteDetailComponent,\n    NoteAddComponent,\n    NoteHeaderComponent,\n    MessagesComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the app is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    }),\n    FormsModule,\n    FontAwesomeModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core'\nimport { MessageService } from './message.service'\nimport { AuthService } from './auth.service'\nimport { Note } from './note'\n\nimport { catchError, map, tap } from 'rxjs/operators'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable, of } from 'rxjs'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoteService {\n\n  constructor(private messageService: MessageService, private http: HttpClient, private auth: AuthService) { }\n\n\n  getNotes(): Observable<Note[]> {\n    return this.http.get<JSON>(AuthService.host)\n      .pipe(\n        catchError(this.handleError<Note[]>('getNotes', []))\n      )\n  }\n\n  createNote(note: Note): any {\n    console.log(note + ' loaded to server')\n    return this.http.post<JSON>(AuthService.host + AuthService.create, {username: 'test', auth: 'test', note: JSON.stringify(note)})\n      .pipe(\n        catchError(this.handleError<Note[]>('createNote', []))\n      ).subscribe(o => {\n        console.log(o)\n        return o\n      })\n  }\n\n  editNote(note: Note): Observable<any> {\n    return this.http.put<JSON>(AuthService.host + AuthService.edit + '/' + note.id, note)\n      .pipe(\n        catchError(this.handleError<Note[]>('editNote', []))\n      )\n  }\n\n  deleteNote(id: number): Observable<any> {\n    return this.http.delete<JSON>(AuthService.host + AuthService.delete + '/' + id)\n      .pipe(\n        catchError(this.handleError<Note[]>('deleteNote', []))\n      )\n  }\n\n  /** Log a NotesService message with the MessageService */\n  private log(message: string): void {\n    this.messageService.add(`NoteService: ${message}`)\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T): any{\n    return(error: any): Observable<T> => {\n      this.auth.setOfflineState(true)\n      // TODO: send the error to remote logging infrastructure\n      console.error(error) // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`)\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons'\nimport {AuthService} from '../auth.service'\n\n@Component({\n  selector: 'app-note-header',\n  templateUrl: './note-header.component.html',\n  styleUrls: ['./note-header.component.sass']\n})\n\nexport class NoteHeaderComponent implements OnInit {\n  @Input()title?: string\n\n  open = false\n  login = true\n  faSign = faSignInAlt\n\n  constructor(public authentication: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  showCanvas(b: boolean): void {\n    this.login = b\n    this.open = !this.open\n  }\n\n  hideCanvas(): void{\n    this.open = false\n  }\n\n  keyDown(e: KeyboardEvent): void {\n    if (e.key === 'Escape') {\n      this.open = false\n    }\n  }\n}\n","<div id=\"off-canvas\" class=\"sidenav\" *ngIf=\"open\">\n  <form class=\"row g-3\">\n    <div class=\"col-auto\">\n      <label for=\"username\" class=\"visually-hidden\">Username</label>\n      <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"username\">\n    </div>\n    <div class=\"col-auto\">\n      <label for=\"password\" class=\"visually-hidden\">Password</label>\n      <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Password\">\n    </div>\n    <div class=\"col-auto\">\n      <button type=\"submit\" class=\"btn btn-pink w-100\">login</button>\n    </div>\n  </form>\n</div>\n\n<div class=\"canvas-hide\" style=\"z-index: 1031\" (click)=\"hideCanvas()\" *ngIf=\"open\"></div>\n\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-pink\" [class.mt-nav]=\"open\" (keydown)=\"keyDown($event)\">\n  <div class=\"container-fluid\">\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbar-collapse-menu\"\n            aria-controls=\"navbar-collapse-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-menu\">\n      <a class=\"navbar-brand\" href=\"#\">{{title}}</a>\n      <span class=\"badge bg-cyan\" *ngIf=\"authentication.getOfflineState()\">currently offline</span>\n      <span class=\"badge bg-cyan ms-2\" *ngIf=\"!authentication.getLoginState()\">not logged in</span>\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"></ul>\n      <div class=\"d-flex\">\n        <button class=\"btn btn-pink me-1\" type=\"button\" title=\"register\">sign up</button>\n        <button class=\"btn btn-pink\" type=\"button\" title=\"Login\" (click)=\"showCanvas(true)\">\n            <fa-icon [icon]=\"faSign\"></fa-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</nav>\n","import { Injectable } from '@angular/core'\nimport {catchError, map, retry, tap} from 'rxjs/operators'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable, of } from 'rxjs'\nimport { MessageService } from './message.service'\nimport {LocalStorageService} from './local-storage.service'\nimport {RemoteManagingService} from './remote-managing.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private messageService: MessageService) {\n  }\n\n  public static host = 'http://localhost:8765/'\n  public static auth = 'api/authenticate'\n  public static register = 'api/register'\n  public static create = 'api/createNote'\n  public static notes = 'api/getNotes'\n  public static edit = 'api/editNote'\n  public static delete = 'api/deleteNote'\n\n  private offline = false\n\n  public getLoginState(): boolean {\n      // this.http.post<Error>(AuthService.host + AuthService.auth, {username: 'test', auth: 'test'})\n      //  .toPromise().then(r => console.log('in' + r)).catch(r => console.log('in' + r))\n      this.offline = true\n      return false\n  }\n\n  public getOfflineState(): boolean {\n    return this.offline\n  }\n\n  public setOfflineState(offline: boolean): void {\n    if (this.offline && !offline) {\n\n    }\n    this.offline = offline\n  }\n\n  /** Log a NotesService message with the MessageService */\n  private log(message: string): void {\n    this.messageService.add(`AuthService: ${message}`)\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T): any{\n    return(error: any): Observable<T> => {\n      this.offline = true\n      // TODO: send the error to remote logging infrastructure\n      console.error(error) // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      // this.log(`${operation} failed: ${error.message}`)\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T)\n    }\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {Note} from './note'\nimport {not} from 'rxjs/internal-compatibility'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n\n  constructor() {\n  }\n\n  public addItem(key: string, value: any): void {\n    const tmpItems = this.getItem(key)\n    if (tmpItems === null) {\n      this.setItem(key, JSON.stringify([value]))\n    } else {\n      const newNotes = JSON.parse(tmpItems) as Note[]\n      newNotes.push(value)\n      this.setItem(key, JSON.stringify(newNotes))\n    }\n  }\n\n  public setItem(key: string, value: string): void {\n    localStorage.setItem(key, value)\n  }\n\n  public getItem(key: string): string | null {\n    return localStorage.getItem(key)\n  }\n\n  public removeItem(key: string): void {\n    localStorage.removeItem(key)\n  }\n\n  public clear(): void {\n    localStorage.clear()\n  }\n\n  getNotes(): Note[] {\n    const tmpItems = this.getItem('notes')\n    if (tmpItems === null){\n      return []\n    }else {\n      return JSON.parse(tmpItems) as Note[]\n    }\n  }\n\n  addNote(note: Note): void {\n    this.addItem('notes', note)\n  }\n\n  setNote(note: Note): void {\n    const notes = this.getNotes()\n    for (const storedNode of notes) {\n      if (storedNode.id === note.id) {\n        storedNode.title = note.title\n        storedNode.message = note.message\n        storedNode.last_edited = note.last_edited\n      }\n    }\n    this.setNotes(notes)\n  }\n\n  setNotes(notes: Note[]): void {\n    this.setItem('notes', JSON.stringify(notes))\n    // TODO: resolve merge conflicts\n  }\n\n  deleteNote(id: number): void {\n    const notes = this.getNotes()\n    notes.forEach((element, index) => {\n      if (element.id === id) {\n        notes.splice(index, 1)\n      }\n    })\n    this.setNotes(notes)\n  }\n}\n","export class Note {\r\n  constructor(\r\n    public id: number,\r\n    public title: string,\r\n    public message: string,\r\n    public created: number,\r\n    // tslint:disable-next-line:variable-name\r\n    public last_edited: number\r\n  ) {}\r\n}\r\n","import {Injectable, OnInit} from '@angular/core'\nimport {AuthService} from './auth.service'\nimport {LocalStorageService} from './local-storage.service'\nimport {NoteService} from './note.service'\nimport {Note} from './note'\nimport {of} from 'rxjs'\nimport {NgForm} from '@angular/forms'\nimport {not} from 'rxjs/internal-compatibility';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RemoteManagingService {\n\n  constructor(\n    private authService: AuthService,\n    private storageService: LocalStorageService,\n    private noteService: NoteService,\n  ) { }\n\n  callback: any\n\n  public async getNotes(): Promise<Array<Note>> {\n    if (this.authService.getLoginState()) {\n      console.log('remote-managing.service: try to load online notes')\n      return this.noteService.getNotes().toPromise().then(notes => {\n        this.storageService.setNotes(notes)\n        return notes\n      })\n    } else {\n      return this.getOfflineNotes()\n    }\n  }\n\n  public getOfflineNotes(): Array<Note> {\n    console.log('remote-managing.service: try to load offline notes')\n    return this.storageService.getNotes()\n  }\n\n  public async addNote(note: Note, form: NgForm): Promise<any> {\n    note.id = Math.floor(Math.random() * (99999 - 1) + 1)\n    if (note.last_edited === 0) {\n      note.last_edited = Date.now()\n    }\n    if (note.created === 0) {\n      note.created = Date.now()\n    }\n    // TODO: subscriber.notify\n    this.callback(note)\n    console.log('remote-managing.service: callback called')\n    if (this.authService.getLoginState()) {\n      console.log('remote-managing.service: remote create note')\n      this.noteService.createNote(note)\n    } else {\n      console.log('remote-managing.service: local add note')\n      this.storageService.addNote(note)\n    }\n    form.resetForm()\n    window.location.reload()\n  }\n\n  public async deleteNote(id: number): Promise<any> {\n    console.log('remote-managing.service: delete note')\n    if (this.authService.getLoginState()) {\n      console.log('remote-managing.service: delete remote note')\n      this.noteService.deleteNote(id)\n    } else {\n      console.log('remote-managing.service: delete local note')\n      this.storageService.deleteNote(id)\n    }\n    window.location.reload()\n  }\n\n  public async getNote(id: number): Promise<Note | undefined> {\n    return await this.getNotes().then((o) => {\n      for (const note of o) {\n        if (note.id === id) {\n          return note\n        }\n      }\n      return undefined\n    })\n  }\n\n  public async setNode(note: Note): Promise<any> {\n    if (this.authService.getLoginState()) {\n      this.noteService.editNote(note)\n    } else {\n      this.storageService.setNote(note)\n    }\n    window.location.reload()\n  }\n\n  public async setNotes(notes: Note[]): Promise<any> {\n    notes.forEach(note => {\n      this.setNode(note)\n    })\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = []\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err))\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}